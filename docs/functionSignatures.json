{
    "_schemaVersion": "1.0.0",

    "mu.filter": {
        "inputs": [
            {"name": "data", "kind": "required", "type": [["numeric"], ["cell"]], "purpose": "data"},
            {"name": "fs", "kind": "required", "type": ["numeric"], "purpose": "sample rate"},
            {"name": "fhp", "kind": "namevalue", "type": ["numeric"], "purpose": "high-pass cutoff frequency"},
            {"name": "flp", "kind": "namevalue", "type": ["numeric"], "purpose": "low-pass cutoff frequency"},
            {"name": "fnotch", "kind": "namevalue", "type": ["numeric"], "purpose": "notch frequency"},
            {"name": "order", "kind": "namevalue", "type": ["numeric"], "purpose": "order of Butterworth filter"},
            {"name": "BW", "kind": "namevalue", "type": ["numeric"], "purpose": "band width of notch filter (Hz)"}
        ],
        "description": "Applies a zero-phase shift filter to the data"
    },

    "mu.prepareANOVA": {
        "inputs": [
            {"name": "data", "kind": "required", "type": ["numeric", "vector"], "repeating": true}
        ],
        "description": "prepare data for ANOVA analysis"
    },

    "mu.se": {
        "inputs": [
            {"name": "x", "kind": "required", "type": ["numeric", "2d"]},
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "dim", "kind": "ordered", "type": ["integer", "scalar", "positive"]}
                ],
                [
                    {"name": "dim", "kind": "ordered", "type": ["choices={'all'}"]}
                ]
            ]},
            {"name": "omitnan", "kind": "ordered", "type": ["choices={'omitnan'}"]}
        ],
        "description": "Calculate the standard error of the mean"
    },

    "mu.fft": {
        "inputs": [
            {"name": "X", "kind": "required", "type": ["numeric", "2d"], "purpose": "data"},
            {"name": "fs", "kind": "required", "type": ["numeric"], "purpose": "sample rate"},
            {"name": "N", "kind": "ordered", "type": ["numeric"], "purpose": "N-point fft"},
            {"name": "dim", "kind": "ordered", "type": ["numeric", "choices={2, 1}"]},
            {"name": "foi", "kind": "ordered", "type": ["numeric", "2d"], "purpose": "frequency of interest"}
        ],
        "description": "FFT: single-sided amplitude and phase spectrum"
    },

    "mu.cwt": {
        "inputs": [
            {"name": "trialsData", "kind": "required", "type": [["cell"], ["numeric"]]},
            {"name": "fs", "kind": "required", "type": ["numeric", "scalar", "@(x) x > 0"], "purpose": "sample rate in Hz"},
            {"name": "segNum", "kind": "ordered", "type": ["numeric", "scalar", "@(x) x > 0 && fix(x) == x"]},
            {"name": "mode", "kind": "namevalue", "type": ["choices={'auto', 'GPU', 'CPU'}"]},
            {"name": "outType", "kind": "namevalue", "type": ["choices={'raw', 'power', 'phase'}"]},
            {"name": "tPad", "kind": "namevalue", "type": ["numeric", "scalar", "@(x) x > 0"], "purpose": "total duration after padding in sec"}
        ],
        "description": "Continuous wavelet transform (CWT) for time-frequency analysis"
    },

    "mu.calchMean": {
        "inputs": [
            {"name": "trialsData", "kind": "required", "type": ["cell"]},
            {"name": "padDir", "kind": "ordered", "type": ["choices = {'head', 'tail'}"]}
        ],
        "description": "Calculate the mean of trial data with padding direction"
    },

    "mu.calchFunc": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle"]},
            {"name": "trialsDatFunca", "kind": "required", "type": ["cell"]},
            {"name": "padDir", "kind": "ordered", "type": ["choices = {'head', 'tail'}"]}
        ],
        "description": "Calculate a function over trial data with padding direction"
    },

    "mu.checkdata": {
        "inputs": [
            {"name": "trialsData", "kind": "required", "type": ["cell"], "repeating": true}
        ],
        "description": "Validate trial data"
    },

    "mu.findpeaktrough": {
        "inputs": [
            {"name": "data", "kind": "required", "type": ["numeric", "2d"]},
            {"name": "dim", "kind": "ordered", "type": ["numeric", "choices={2, 1}"]}
        ],
        "description": "Find peaks and troughs in data along a specified dimension"
    },

    "mu.findvectorloc": {
        "inputs": [
            {"name": "X", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "pat", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "direction", "kind": "ordered", "type": ["choices={'first', 'last'}"]}
        ],
        "description": "Find the location of a vector pattern in another vector"
    },

    "mu.obtainArgoutN": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle"], "purpose": "函数句柄"},
            {"name": "Ns", "kind": "required", "type": ["vector", "integer", "positive"], "purpose": "返回fcn的第[n1,n2,...,nN]个输出"},
            {"name": "arg", "kind": "ordered", "repeating": true, "purpose": "args of fcn"}
        ],
        "description": "Get specified outputs from a function"
    },

    "mu.path2func": {
        "inputs": [
            {"name": "P", "kind": "required", "type": ["file=*.m"], "purpose": "full path to the function file"}
        ],
        "description": "Convert path to function handle"
    },

    "mu.parcellfun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "A", "kind": "required", "type": ["cell"]},
            {"name": "B", "kind": "ordered", "type": ["cell"], "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each cell in parallel"
    },

    "mu.pararrayfun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "A", "kind": "required"},
            {"name": "B", "kind": "ordered", "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each element in an array in parallel"
    },

    "mu.parrowfun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "A", "kind": "required"},
            {"name": "B", "kind": "ordered", "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each row in parallel"
    },

    "mu.parslicefun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "dim", "kind": "required", "type": ["numeric", "scalar", "positive"]},
            {"name": "A", "kind": "required"},
            {"name": "B", "kind": "ordered", "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each slice in parallel"
    },

    "mu.rowfun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "A", "kind": "required"},
            {"name": "B", "kind": "ordered", "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each row"
    },

    "mu.slicefun": {
        "inputs": [
            {"name": "fcn", "kind": "required", "type": ["function_handle", "scalar"]},
            {"name": "dim", "kind": "required", "type": ["numeric", "scalar", "positive"]},
            {"name": "A", "kind": "required"},
            {"name": "B", "kind": "ordered", "repeating": true},
            {"name": "UniformOutput", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "ErrorHandler", "kind": "namevalue", "type": ["scalar", "function_handle"]}
        ],
        "description": "Apply a function to each slice"
    },

    "mu.shiftmatrix": {
        "inputs": [
            {"name": "X", "kind": "required", "type": ["numeric", "2d"], "purpose": "data matrix"},
            {"name": "N", "kind": "required", "type": ["numeric", "numel=2"], "purpose": "number of shifts in each dimension"},
            {"name": "opt", "kind": "ordered", "type": ["choices={'zero', 'repliacte', 'loop'}"], "purpose": "shift option"}
        ],
        "description": "Shift a matrix in specified dimensions"
    },

    "mu.parsestruct": {
        "inputs": [
            {"name": "S", "kind": "required", "type": ["@(arg) isstruct(arg)"]},
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "fieldName", "kind": "ordered", "type": [["string"], ["char"]], "repeating": true}
                ],
                [
                    {"name": "sIndex", "kind": "ordered", "type": ["scalar", "positive", "integer"]},
                    {"name": "fieldName", "kind": "ordered", "type": [["string"], ["char"]], "repeating": true}
                ]
            ]}
        ],
        "description": "Parse the fields of a struct array"
    },

    "mu.getabspath": {
        "inputs": [
            {"name": "path", "kind": "required", "type": [["folder"], ["string"], ["char"]], "purpose": "path to a folder or file"}
        ],
        "description": "Get absolute path of a folder or file"
    },

    "mu.getlastpath": {
        "inputs": [
            {"name": "path", "kind": "required", "type": [["folder"], ["string"], ["char"]], "purpose": "path to a folder or file"}
        ],
        "description": "Get last path component of a folder or file"
    },

    "mu.getrootpath": {
        "inputs": [
            {"name": "path", "kind": "required", "type": [["folder"], ["string"], ["char"]], "purpose": "path to a folder or file"}
        ],
        "description": "Get first path component of a folder or file"
    },

    "mu.getorfull": {
        "inputs": [
            {"name": "s", "kind": "required", "type": ["struct"], "purpose": "struct to complete"},
            {"name": "default", "kind": "required", "type": ["struct"], "purpose": "struct with default values"}
        ],
        "description": "Complete a struct with default values"
    },

    "mu.structcat": {
        "inputs": [
            {"name": "A", "kind": "required", "type": ["struct"], "repeating": true}
        ],
        "description": "Concatenate multiple structs into one"
    },

    "mu.save": {
        "inputs": [
            {"name": "filename", "kind": "required", "type": [["file=*.mat"], ["string"], ["char"]]},
            {"name": "variable", "kind": "required", "type": ["@(x) ~contains(x, '-')"], "repeating": true},
            {"name": "option", "kind": "ordered", "type": ["@(x) contains(x, '-')"], "repeating": true}
        ],
        "description": "Skip saving if file exists"
    },

    "mu.print": {
        "inputs": [
            {"name": "target", "kind": "required", "type": ["@(x) isscalar(x) && isgraphics(x)"]},
            {"name": "FILENAME", "kind": "required", "type": [["string"], ["char"]]},
            {"name": "formattype", "kind": "ordered", "type": ["choices={'-djpeg', '-dpng', '-dtiff', '-dtiffn', '-dmeta'}"]},
            {"name": "resolution", "kind": "ordered", "type": ["string", "choices={'-r600', '-r300', '-r0'}"]}
        ],
        "description": "Skip printing if file exists"
    },

    "mu.load": {
        "inputs": [
            {"name": "FILENAME", "kind": "required", "type": [["file=*.mat"], ["@(arg) isempty(arg)"]]},
            {"name": "varNames", "kind": "ordered", "type": [["string"], ["char"], ["cell"]]}
        ],
        "description": "Skip loading if variables exist"
    },

    "mu.getVarsFromWorkspace": {
        "inputs": [
            {"name": "regexp", "kind": "ordered", "type": [["string"], ["char"], ["@(x) isempty(x)"]], "repeating": true}
        ],
        "description": "Retrieve variables from the workspace using regular expressions"
    },

    "mu.syncRepositories": {
        "inputs": [
            {"name": "logstr", "kind": "required", "type": [["string"], ["char"], ["@(x) isempty(x)"]]},
            {"name": "SyncOption", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "RepositoriesRootPath", "kind": "namevalue", "type": ["folder"]},
            {"name": "RepositoryPaths", "kind": "namevalue", "type": [["string"], ["char"], ["cell"]]}
        ],
        "description": "Update all Git projects in the specified directory"
    },

    "mu.getObjVal": {
        "inputs": [
            {"name": "Fig", "kind": "required", "type": ["@(args) all(isgraphics(args))"]},
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "ObjType", "kind": "required", "type": ["choices = {'line'}"]},
                    {"name": "getParams", "kind": "ordered", "type": [["choices = {'Color', 'LineStyle', 'LineWidth', 'DisplayName', 'XData', 'YData', 'ZData'}"], ["@(args) isempty(args)"]]},
                    {"name": "searchParams", "kind": "ordered", "type": ["choices = {'Color', 'LineStyle', 'LineWidth', 'DisplayName'}"]},
                    {"name": "searchValue", "kind": "ordered"}
                ],
                [
                    {"name": "ObjType", "kind": "required", "type": ["choices = {'image'}"]},
                    {"name": "getParams", "kind": "ordered", "type": [["choices = {'XData', 'YData', 'CData', 'AlphaData'}"], ["@(args) isempty(args)"]]},
                    {"name": "searchParams", "kind": "ordered", "type": ["choices = {'AlphaData'}"]},
                    {"name": "searchValue", "kind": "ordered"}
                ],
                [
                    {"name": "ObjType", "kind": "required", "type": ["choices = {'axes'}"]},
                    {"name": "getParams", "kind": "ordered", "type": [["choices = {'Tag', 'XLim', 'YLim', 'Title', 'Position', 'XTickLabel', 'XTick', 'YTickLabel', 'YTick', 'XScale', 'YScale'}"], ["@(args) isempty(args)"]]},
                    {"name": "searchParams", "kind": "ordered", "type": ["choices = {'Tag','XLim', 'YLim', 'Title', 'Position', 'XTickLabel', 'XTick', 'YTickLabel', 'YTick', 'XScale', 'YScale'}"]},
                    {"name": "searchValue", "kind": "ordered"}
                ],
                [
                    {"name": "ObjType", "kind": "required", "type": ["choices = {'figure', 'FigOrAxes'}"]},
                    {"name": "getParams", "kind": "ordered", "type": [["choices = {'Tag', 'Children', 'Position'}"], ["@(args) isempty(args)"]]},
                    {"name": "searchParams", "kind": "ordered", "type": ["choices = {'Tag','XLim', 'YLim', 'Title', 'Position', 'XTickLabel', 'XTick', 'YTickLabel', 'YTick', 'XScale', 'YScale'}"]},
                    {"name": "searchValue", "kind": "ordered"}
                ]
            ]}
        ]
    },

    "mu.addBars": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "xval", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "color", "kind": "ordered", "type": [["choices = {'r', 'g', 'b', 'y', 'm', 'k', 'w'}"], ["numeric", "vector"]]},
                    {"name": "alpha", "kind": "ordered", "type": ["numeric", "scalar"], "purpose": "default 0.1"}
                ],
                [
                    {"name": "ax", "kind": "required", "type": ["@(args) strcmp(class(args), 'matlab.graphics.Graphics')"]},
                    {"name": "xval", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "color", "kind": "ordered", "type": [["choices = {'r', 'g', 'b', 'y', 'm', 'k', 'w'}"], ["numeric", "vector"]]},
                    {"name": "alpha", "kind": "ordered", "type": ["numeric", "scalar"], "purpose": "default 0.1"}
                ]
            ]}
        ],
        "description": "Add shaded bars to a plot"
    },

    "mu.addLines": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "lines", "kind": "ordered", "type": ["struct"]}
                ],
                [
                    {"name": "FigOrAxes", "kind": "required", "type": ["@(args) all(isgraphics(args))"]},
                    {"name": "lines", "kind": "ordered", "type": ["struct"]}
                ]
            ]},
            {"name": "ConstantLine", "kind": "namevalue", "type": ["logical", "scalar"], "purpose": "use xline/yline to create vertical/horizontal lines"},
            {"name": "Layer", "kind": "namevalue", "type": ["choices={'top', 'bottom'}"]},
            {"name": "ignoreInvisible", "kind": "namevalue", "type": ["logical", "scalar"]}
        ],
        "description": "Add lines to a all subplots in a figure or to specific axes"
    },

    "mu.addTicks": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "axisName", "kind": "required", "type": ["choices={'x', 'y', 'z'}"]},
                    {"name": "vals", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "labelStrs", "kind": "ordered", "type": [["string", "vector"], ["@iscellstr"]]}
                ],
                [
                    {"name": "ax", "kind": "required", "type": ["@(args) strcmp(class(args), 'matlab.graphics.axis.Axes')"]},
                    {"name": "axisName", "kind": "required", "type": ["choices={'x', 'y', 'z'}"]},
                    {"name": "vals", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "labelStrs", "kind": "ordered", "type": [["string", "vector"], ["@iscellstr"]]}
                ]
            ]}
        ],
        "description": "Add custom ticks to a specific axis in a plot"
    },

    "mu.addTitle": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "str", "kind": "required", "type": [["string"], ["char"]]}
                ],
                [
                    {"name": "Fig", "kind": "required", "type": ["@(args) isa(x, 'matlab.ui.Figure')"]},
                    {"name": "str", "kind": "required", "type": [["string"], ["char"]]}
                ]
            ]},
            {"name": "HorizontalAlignment", "kind": "namevalue", "type": ["choices = {'left', 'center', 'right'}"]},
            {"name": "Position", "kind": "namevalue", "type": ["numeric", "vector"]},
            {"name": "FontSize", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "FontWeight", "kind": "namevalue", "type": ["choices = {'normal', 'bold'}"]},
            {"name": "Interpreter", "kind": "namevalue", "type": ["choices = {'none', 'latex', 'tex'}"]}
        ],
        "description": "Add a title to a figure"
    },

    "mu.addWaveError": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "t", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "Y", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "E", "kind": "required", "type": ["numeric", "vector"]}
                ],
                [
                    {"name": "ax", "kind": "required", "type": ["@(args) strcmp(class(args), 'matlab.graphics.Graphics')"]},
                    {"name": "t", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "Y", "kind": "required", "type": ["numeric", "vector"]},
                    {"name": "E", "kind": "required", "type": ["numeric", "vector"]}
                ]
            ]},
            {"name": "C", "kind": "ordered", "type": [["choices = {'r', 'g', 'b', 'y', 'm', 'k', 'w'}"], ["numeric", "vector"]]}
        ],
        "description": "Add wave error to a plot"
    },

    "mu.boxplot": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "X", "kind": "required", "type": ["cell"], "purpose": "Each column is a category"}
                ],
                [
                    {"name": "ax", "kind": "required", "type": ["@(args) isscalar(args) && all(isgraphics(args))"]},
                    {"name": "X", "kind": "required", "type": ["cell"], "purpose": "Each column is a category"}
                ]
            ]},
            {"name": "Positions", "kind": "namevalue", "type": ["numeric", "vector"]},
            {"name": "Colors", "kind": "namevalue", "type": [["numeric"], ["cell"]]},
            {"name": "Notch", "kind": "namevalue", "type": ["choices = {'on', 'off'}"]},
            {"name": "BoxEdgeType", "kind": "namevalue", "type": [["choices = {'SE', 'STD'}"], ["numeric", "numel=2"]], "purpose": "default:[25,75]"},
            {"name": "BoxParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'LineStyle','-','LineWidth',0.5,'FaceColor','none','FaceAlpha',0.5}"},
            {"name": "CenterLineParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'Type','Median','LineStyle','-','LineWidth','auto','Color','auto'}"},
            {"name": "Whisker", "kind": "namevalue", "type": ["numeric", ["numel=1"], ["numel=2"]], "purpose": "default: 1.5"},
            {"name": "WhiskerParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'LineStyle','-','LineWidth','auto','Color','auto'}"},
            {"name": "WhiskerCapParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'LineStyle','-','LineWidth','auto','Color','auto','Width',0.4}"},
            {"name": "GroupLabels", "kind": "namevalue", "type": [["cell"], ["char"], ["string"]]},
            {"name": "GroupLegends", "kind": "namevalue", "type": [["cell"], ["char"], ["string"]]},
            {"name": "GroupLines", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "GroupSpace", "kind": "namevalue", "type": ["numeric", "scalar"], "purpose": "default: 0.1"},
            {"name": "CategoryLabels", "kind": "namevalue", "type": [["cell"], ["char"], ["string"]]},
            {"name": "CategorySpace", "kind": "namevalue", "type": ["numeric", "scalar"], "purpose": "default: 0.4"},
            {"name": "IndividualDataPoint", "kind": "namevalue", "type": ["choices = {'show', 'hide'}"], "purpose": "default:'show'"},
            {"name": "SymbolParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'Marker','o','SizeData',36,'MarkerEdgeColor','w','MarkerFaceColor','auto','MarkerFaceAlpha',0.3,'LineWidth',0.1}"},
            {"name": "Jitter", "kind": "namevalue", "type": ["numeric", "scalar"], "purpose": "default: 0.1"},
            {"name": "Outlier", "kind": "namevalue", "type": ["choices = {'show', 'hide'}"], "purpose": "default:'hide'"},
            {"name": "OutlierParameters", "kind": "namevalue", "type": ["cell"], "purpose": "default:{'Marker','+','MarkerEdgeColor','auto','MarkerFaceColor','auto','SizeData',36,'LineWidth',0.5"}
        ],
        "description": "Create a boxplot with various customization options"
    },

    "mu.colorbar": {
        "inputs": [
            {"name": "Location", "kind": "namevalue", "type": ["choices = {'northoutside', 'southoutside', 'eastoutside', 'westoutside'}"]},
            {"name": "Interval", "kind": "namevalue", "type": ["scalar", "numeric"], "purpose": "default:0.01"},
            {"name": "Width", "kind": "namevalue", "type": ["scalar", "numeric"], "purpose": "default:0.05"},
            {"name": "Label", "kind": "namevalue", "type": [["string"], ["char"]]}
        ],
        "description": "Add a colorbar to a figure with specified location and properties"
    },

    "mu.histogram": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "X", "kind": "required", "type": [["numeric"], ["cell"]]},
                    {"name": "edges", "kind": "ordered", "type": ["numeric", "vector"]}
                ],
                [
                    {"name": "ax", "kind": "required", "type": ["@(args) strcmp(class(args), 'matlab.graphics.axis.Axes')"]},
                    {"name": "X", "kind": "required", "type": [["numeric"], ["cell"]]},
                    {"name": "edges", "kind": "ordered", "type": ["numeric", "vector"]}
                ]
            ]},
            {"name": "width", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "LineWidth", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "FaceColor", "kind": "namevalue", "type": [["cell"], ["choices = {'none'}"]]},
            {"name": "EdgeColor", "kind": "namevalue", "type": [["cell"], ["choices = {'none'}"]]},
            {"name": "DisplayName", "kind": "namevalue", "type": ["cell"]},
            {"name": "BinWidth", "kind": "namevalue", "type": ["numeric", "scalar", "positive"]},
            {"name": "BinMethod", "kind": "namevalue", "type": ["choices = {'auto', 'scott', 'fd', 'integers', 'sturges', 'sqrt'}"]},
            {"name": "DistributionCurve", "kind": "namevalue", "type": ["choices = {'show', 'hide'}"]}
        ],
        "description": "Create a histogram with various customization options"
    },

    "mu.rasterplot": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "rasterData", "kind": "required", "type": ["struct"]},
                    {"name": "sz", "kind": "ordered", "type": ["scalar", "positive", "integer"]}
                ],
                [
                    {"name": "axes", "kind": "required", "type": ["@(args) strcmp(class(args), 'matlab.graphics.Graphics')"]},
                    {"name": "rasterData", "kind": "required", "type": ["struct"]},
                    {"name": "sz", "kind": "ordered", "type": ["scalar", "positive", "integer"]}
                ]
            ]},
            {"name": "border", "kind": "namevalue", "type": ["logical", "scalar"]}
        ],
        "description": "Create a raster plot from spike data"
    },

    "mu.scaleAxes": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "axisName", "kind": "required", "type": ["choices = {'x', 'y', 'c', 'z'}"]},
                    {"name": "autoScale", "kind": "ordered", "type": ["choices = {'on', 'off'}"], "purpose": "auto scale y/c from current axes"}
                ],
                [
                    {"name": "FigOrAxes", "kind": "required", "type": ["@(args) all(isgraphics(args), 'all')"]},
                    {"name": "axisName", "kind": "ordered", "type": ["choices = {'x', 'y', 'c', 'z'}"]}
                ],
                [
                    {"name": "FigOrAxes", "kind": "required", "type": ["@(args) all(isgraphics(args), 'all')"]},
                    {"name": "axisName", "kind": "ordered", "type": ["choices = {'x', 'y', 'c', 'z'}"]},
                    {"name": "autoScale", "kind": "ordered", "type": ["choices = {'on', 'off'}"], "purpose": "auto scale y/c from current axes"}
                ]
            ]},
            {"name": "axisRange", "kind": "ordered", "type": ["numeric"]},
            {"name": "cutoffRange", "kind": "ordered", "type": [["numeric", "numel=2"], ["@(args) isempty(args)"]]},
            {"name": "symOpt", "kind": "ordered", "type": ["choices = {'none', 'min', 'max', 'positive', 'negative'}"], "purpose": "symmetrical option"},
            {"name": "cutoffRange", "kind": "namevalue", "type": [["numeric", "numel=2"], ["@(args) isempty(args)"]]},
            {"name": "symOpt", "kind": "namevalue", "type": ["choices = {'none', 'min', 'max', 'positive', 'negative'}"], "purpose": "symmetrical option"},
            {"name": "uiOpt", "kind": "namevalue", "type": ["choices = {'show', 'hide'}"], "purpose": "call an App for scaling"},
            {"name": "ignoreInvisible", "kind": "namevalue", "type": ["logical", "scalar"]},
            {"name": "autoTh", "kind": "namevalue", "type": ["numel=2", "numeric"], "purpose": "quantiles of range for auto scaling (default:[0.01,0.99])"}
        ],
        "description": "Scale axes of a figure or axes with various options"
    },

    "mu.subplot": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "row", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "col", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "index", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "nSize", "kind": "ordered", "type": ["numeric", "vector"]},
                    {"name": "margins", "kind": "ordered", "type": ["numeric", "vector", "numel=4"]},
                    {"name": "paddings", "kind": "ordered", "type": ["numeric", "vector", "numel=4"]},
                    {"name": "shape", "kind": "ordered", "type": ["choices = {'auto', 'square-min', 'square-max', 'fill'}"]}
                ],
                [
                    {"name": "Fig", "kind": "required", "type": ["@(args) all(isgraphics(args))"]},
                    {"name": "row", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "col", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "index", "kind": "required", "type": ["scalar", "positive", "integer"]},
                    {"name": "nSize", "kind": "ordered", "type": ["numeric", "vector"]},
                    {"name": "margins", "kind": "ordered", "type": ["numeric", "vector", "numel=4"]},
                    {"name": "paddings", "kind": "ordered", "type": ["numeric", "vector", "numel=4"]},
                    {"name": "shape", "kind": "ordered", "type": ["choices = {'auto', 'square-min', 'square-max', 'fill'}"]}
                ]
            ]},
            {"name": "nSize", "kind": "namevalue", "type": ["numeric", "vector"]},
            {"name": "margins", "kind": "namevalue", "type": ["numeric", "vector", "numel=4"], "purpose": "[left,right,bottom,top]([.05,.05,.08,.05])"},
            {"name": "paddings", "kind": "namevalue", "type": ["numeric", "vector", "numel=4"], "purpose": "[left,right,bottom,top]([.03,.03,.08,.05])"},
            {"name": "shape", "kind": "namevalue", "type": ["choices = {'auto', 'square-min', 'square-max', 'fill'}"]},
            {"name": "alignment", "kind": "namevalue", "type": [["numeric"], ["choices = {'left-bottom', 'left-center', 'left-top', 'center-bottom', 'center', 'center-top', 'right-bottom', 'right-center', 'right-top'}"]], "purpose": "[horizontal,vertical]"},
            {"name": "alignment_horizontal", "kind": "namevalue", "type": [["numeric", "scalar"], ["choices = {'left', 'center', 'right'}"]]},
            {"name": "alignment_vertical", "kind": "namevalue", "type": [["numeric", "scalar"], ["choices = {'bottom', 'center', 'top'}"]]},
            {"name": "margin_left", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.05"},
            {"name": "margin_right", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.05"},
            {"name": "margin_bottom", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.08"},
            {"name": "margin_top", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.05"},
            {"name": "padding_left", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.03"},
            {"name": "padding_right", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.03"},
            {"name": "padding_bottom", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.08"},
            {"name": "padding_top", "kind": "namevalue", "type": ["scalar"], "purpose": "default: 0.05"},
            {"name": "divBox", "kind": "namevalue", "type": ["choices = {'show', 'hide'}"]}
        ],
        "description": "Create a subplot with specified rows, columns, and index, with various layout options"
    },

    "mu.ctgen": {
        "inputs": [
            {"name": "ICIs", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "durs", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "fs", "kind": "required", "type": ["numeric", "scalar"]},
            {"name": "type", "kind": "required", "type": ["choices = {'REG', 'IRREG'}"]},
            {"name": "sigmas", "kind": "namevalue", "type": ["numeric", "vector"]},
            {"name": "pulseLen", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "range", "kind": "namevalue", "type": ["numeric", "vector"]}
        ],
        "description": "Generate click trains"
    },

    "mu.tonegen": {
        "inputs": [
            {"name": "f", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "durs", "kind": "required", "type": ["numeric", "vector"]},
            {"name": "fs", "kind": "required", "type": ["numeric", "scalar"]},
            {"name": "fsDevice", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "harmonics", "kind": "namevalue", "type": ["numeric", "vector"]},
            {"name": "amps", "kind": "namevalue", "type": ["numeric"], "purpose": "row for frequency, column for harmonic"},
            {"name": "rfTime", "kind": "namevalue", "type": ["numeric", "scalar"]},
            {"name": "rfOpt", "kind": "namevalue", "type": ["choices = {'both', 'rise', 'fall'}"]},
            {"name": "normOpt", "kind": "namevalue", "type": ["scalar", "logical"]}
        ],
        "description": "Generate tones or complex tones"
    },

    "mu.genRiseFallEdge": {
        "inputs": [
            {"name": "y", "kind": "required", "type": ["numeric"], "purpose": "[nch,nsample]"},
            {"name": "fs", "kind": "required", "type": ["numeric", "scalar"]},
            {"name": "rfTime", "kind": "required", "type": ["numeric", "scalar"], "purpose": "rise-fall time, in sec"},
            {"name": "rfOpt", "kind": "ordered", "type": ["choices = {'both', 'rise', 'fall'}"]}
        ],
        "description": "Generate rise and fall edges for a signal"
    },

    "playAudio": {
        "inputs": [
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "y", "kind": "required", "type": ["numeric", "2d"]},
                    {"name": "fsSound", "kind": "required", "type": ["positive", "scalar"]},
                    {"name": "fsDevice", "kind": "ordered", "type": ["positive", "scalar"]}
                ],
                [
                    {"name": "filepath", "kind": "required", "type": ["file"]},
                    {"name": "fsDevice", "kind": "ordered", "type": ["positive", "scalar"]}
                ]
            ]}
        ],
        "description": "Play audio from a signal or file"
    },

    "validateinput": {
        "inputs": [
            {"name": "prompt", "kind": "required", "type": ["string", "char"]},
            {"mutuallyExclusiveGroup": [
                [
                    {"name": "validateFcn", "kind": "ordered", "type": ["function_handle"]},
                    {"name": "sInput", "kind": "ordered", "type": ["choices = {'s'}"], "purpose": "str input"}
                ],
                [
                    {"name": "validateFcn", "kind": "ordered", "type": ["function_handle"]}
                ],
                [
                    {"name": "sInput", "kind": "ordered", "type": ["choices = {'s'}"], "purpose": "str input"}
                ]
            ]},
            {"name": "UI", "kind": "namevalue", "type": "choices = {'on', 'off'}"}
        ],
        "description": "Validate user input with a prompt and optional validation function"
    },

    "mu.msgbox": {
        "inputs": [
            {"name": "content", "kind": "required", "type": [["string", "char"], ["cell"]]},
            {"name": "title", "kind": "ordered", "type": ["string", "char"]},
            {"name": "alignment", "kind": "ordered", "type": ["choices = {'center', 'left-top', 'right-top', 'center-top', 'left-center', 'right-center', 'left-bottom', 'right-bottom', 'center-bottom'}"]},
            {"name": "Alignment", "kind": "namevalue", "type": ["choices = {'center', 'left-top', 'right-top', 'center-top', 'left-center', 'right-center', 'left-bottom', 'right-bottom', 'center-bottom'}"]},
            {"name": "TitleColor", "kind": "namevalue"},
            {"name": "ContentColor", "kind": "namevalue"},
            {"name": "TitleFontSize", "kind": "namevalue", "type": ["scalar", "positive"]},
            {"name": "ContentFontSize", "kind": "namevalue", "type": ["scalar", "positive"]},
            {"name": "BackgroundColor", "kind": "namevalue"}
        ],
        "description": "Display a message box with customizable content, title, and appearance"
    }
    
}